import json
from typing import List, Dict

import numpy as np
import redis
import faiss
import time

class RetrievalDatabase:
    _instance = None  # Singleton Instance

    def __new__(cls, dimension: int, encoder, redis_host: str = "localhost", redis_port: int = 6379, faiss_index_file : str = "faiss_index.bin"):
        """
        Singleton: –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∫–ª–∞—Å—Å —Å–æ–∑–¥–∞—Å—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–Ω—Å—Ç–∞–Ω—Å.
        """
        if cls._instance is None:
            cls._instance = super(RetrievalDatabase, cls).__new__(cls)
            cls._instance._init_instance(dimension, encoder, redis_host, redis_port, faiss_index_file)
        return cls._instance

    def _init_instance(self, dimension: int, encoder, redis_host: str, redis_port: int, faiss_index_file : str) -> None:
        self.redis_db = redis.Redis(host=redis_host, port=redis_port, db=0, decode_responses=True)
        self.encoder = encoder
        self.dimension = dimension
        self.faiss_index_file = faiss_index_file

        try:
            self.index = faiss.read_index(self.faiss_index_file)
            print("FAISS –∏–Ω–¥–µ–∫—Å –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞!")
        except RuntimeError:
            self.index = faiss.IndexFlatL2(self.dimension)
            print("FAISS –∏–Ω–¥–µ–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π!")

    def insert_news(self, news_list: List[Dict[str, str]]) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –≤ Redis + –∏—Ö –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤ FAISS.
        """
        embeddings = []
        for i, news in enumerate(news_list):
            news_id = f"news:{i}"
            self.redis_db.set(news_id, json.dumps(news))

            embedding = self.encoder.encode(news["content"]).reshape(1, -1)
            embeddings.append(embedding)

        if embeddings:
            embeddings = np.vstack(embeddings)
            self.index.add(embeddings)
            print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(news_list)} –Ω–æ–≤–æ—Å—Ç–µ–π")

    def save_index(self) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç FAISS-–∏–Ω–¥–µ–∫—Å –Ω–∞ –¥–∏—Å–∫.
        """
        faiss.write_index(self.index, self.faiss_index_file)
        print("FAISS –∏–Ω–¥–µ–∫—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

    def search(self, query_embedding: np.ndarray, top_k: int = 5) -> List[Dict[str, str]]:
        distances, indices = self.index.search(query_embedding, top_k)

        news_ids = [f"news:{idx}" for idx in indices[0]]
        news_data = self.redis_db.mget(news_ids)
        return [json.loads(news) for news in news_data if news]



if __name__ == '__main__':
    from sentence_transformers import SentenceTransformer

    encoder = SentenceTransformer("all-MiniLM-L6-v2")

    db = RetrievalDatabase(dimension=384, encoder=encoder)

    sample_news = [
        {
            "url": "https://news.itmo.ru/ru/education/official/news/13092/",
            "title": "–ò–¢–ú–û –≤–æ—à—ë–ª –≤ —Ç–æ–ø-10 –≤—É–∑–æ–≤",
            "date": "22 –Ø–Ω–≤–∞—Ä—è 2025",
            "content": "–ò–¢–ú–û —Å—Ç–∞–ª –ø–µ—Ä–≤—ã–º —Å—Ä–µ–¥–∏ –ø–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∏—Ö –≤—É–∑–æ–≤ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤."
        },
        {
            "url": "https://news.itmo.ru/ru/university_live/achievements/news/14133/",
            "title": "–¶–∏—Ñ—Ä–æ–≤–∞—è –∫–∞—Ñ–µ–¥—Ä–∞ –ò–¢–ú–û",
            "date": "10 –Ø–Ω–≤–∞—Ä—è 2025",
            "content": "–ò–¢–ú–û –≤–æ—à—ë–ª –≤ —á–∏—Å–ª–æ –ª–∏–¥–µ—Ä–æ–≤ —Ü–∏—Ñ—Ä–æ–≤–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏, —Å–æ–∑–¥–∞–≤ —Ü–∏—Ñ—Ä–æ–≤—É—é –∫–∞—Ñ–µ–¥—Ä—É."
        },
        {
            "url": "https://news.itmo.ru/ru/science/ai/news/15000/",
            "title": "–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ –ò–¢–ú–û",
            "date": "5 –§–µ–≤—Ä–∞–ª—è 2025",
            "content": "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏ –ò–¢–ú–û —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö."
        }
    ]

    #db.insert_news(sample_news)

    #db.save_index()


    query = "–≥–¥–µ –ª—É—á—à–∏–µ IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã?"
    querry_embed = encoder.encode(query).reshape(1, -1)

    time_start = time.time()

    results = db.search(querry_embed, top_k=2)

    print("\nüîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:")
    for res in results:
        print(f"{res['title']} ({res['url']})")
        print(f"{res['content']}\n")
    print(f'–ó–∞–Ω—è–ª–æ {time.time() - time_start}')
